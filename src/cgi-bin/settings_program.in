#! /usr/bin/perl

=head1 NAME

settings - produces start page for settings

=head1 SYNOPSIS

 https://server/schulkonsole/settings

=head1 DESCRIPTION

C<settings> produces the start page of settings.
The HTML template is settings.tt.

=head2 Template variables

Additionally to the variables of Schulkonsole::Session C<settings>
provides the following variables:

=over

=cut

use strict;
use lib '@datadir@/@PACKAGE@';
use Env::Bash;
use Schulkonsole::Encode;
use Schulkonsole::Files;
use Schulkonsole::Session;
use Sophomorix::SophomorixAPI;
use Sophomorix::SophomorixConfig;


my $this_file = 'settings_program';


my $sk_session = new Schulkonsole::Session($this_file);
if (not $sk_session->get_password()) {
	my $q = new CGI;
	my $url = $q->url( -full => 1 );

	# we send cookies over secure connections only
	if ($url =~ s/^http:/https:/g) {
		$sk_session->redirect($url);
	} else {
		$sk_session->exit_with_login_page($this_file);
	}
}

my $q = $sk_session->query();


my $id = $sk_session->userdata('id');
my $password = $sk_session->get_password();


my %preferences_conf = read_preferences_conf();
my %preferences_conf_new;

if ($q->param('accept')) {
	eval {
	my @errors;

	foreach my $key (keys %preferences_conf) {
		if (my $value = $q->param($key)) {	# will ignore $value == 0
			$value =~ s/^\s*(.+)\s*$/$1/;

			if ($preferences_conf{$key} ne $value) {
				CHECKVALUE: {
				$key eq 'conf_max_idle_time' and do {
					my $new_value = int($value);
					if (not $new_value) {
						push @errors, $sk_session->d()->get(
							'Die Sitzungsdauer muss in Minuten angegeben werden');
					} else {
						$value = $new_value;
					}

					last CHECKVALUE;
				};
				}
				$preferences_conf_new{$key} = $value;
			}
		}
	}

	# commit changes
	if (@errors) {
		$sk_session->set_status(join(', ', @errors), 1);
	} elsif (%preferences_conf_new) {
		my $lines = new_preferences_lines(\%preferences_conf_new);
		Schulkonsole::Files::write_preferences_conf_file(
			$id, $password, $lines);

		$sk_session->set_status(
			$sk_session->d()->get('&Auml;nderungen &uuml;bernommen'), 0);
	}
	};
	if ($@) {
		$sk_session->standard_error_handling($this_file, $@);
	}
}



# pre-set values for <form>
foreach my $key (keys %preferences_conf) {
	if (defined $preferences_conf_new{$key}) {
		$q->param($key, $preferences_conf_new{$key});
	} else {
		$q->param($key, $preferences_conf{$key});
	}
}



$sk_session->print_page("$this_file.tt", $this_file);




=back

=head2 Form fields

=over

=item C<accept>

Write the changes

=cut



sub read_preferences_conf {

=item C<conf_max_idle_time>

corresponds to max_idle_time in F<preferences.conf>

=cut

	return (
		conf_max_idle_time => int(Schulkonsole::Config::expire_seconds(
			$Schulkonsole::Config::_max_idle_time) / 60),
	);
}




sub new_preferences_lines {
	my $new = shift;
	my %new = %$new;

	my @lines;

	
	my %key_map = (
		conf_max_idle_time => 'max_idle_time',
	);
	my %key_map_rev = reverse %key_map;


	if (open CONF, '<',
	         Schulkonsole::Encode::to_fs(
	         	$Schulkonsole::Config::_preferences_conf_file)) {
		while (<CONF>) {
			if (/^#/ or /^\[/ or /^\s*$/) {
				push @lines, $_;
			} elsif (my ($conf_key, $value) = /^(.+?)=(.*)/) {
				my $key = $key_map_rev{$conf_key};
				if ($new{$key}) {
					$value = $new{$key};
					if ($key eq 'conf_max_idle_time') {
						$value = "+${value}m";
					}
					push @lines, "$conf_key=$value\n";

					delete $new{$key};
				} else {
					push @lines, $_;
				}
			}
		}
		close CONF;
	} else {
		push @lines, "[Schulkonsole Preferences]\n";
	}

	foreach my $key (sort keys %new) {
		my $value = $new{$key};
		if ($key eq 'conf_max_idle_time') {
			$value = "+${value}m";
		}
		push @lines, "$key_map{$key}=$value\n";
	}

	return \@lines;
}

=back
