#! /usr/bin/perl

=head1 NAME

project_revision_control - create/drop repository of a project

=head1 SYNOPSIS

 https://server/schulkonsole/project_revision_control

=head1 DESCRIPTION

C<project_db> lets you create or drop a repository of a project.
The HTML template is project_revision_control.shtml.

=head2 Template variables

Additionally to the variables of Schulkonsole::Session
C<project_revision_control> provides the following variables:

=over

=cut

use strict;
use lib '@datadir@/@PACKAGE@';
use Schulkonsole::Session;
use Schulkonsole::Info;
use Schulkonsole::Sophomorix;
use Schulkonsole::Collab;

my $this_file = 'project_revision_control';


my $sk_session = new Schulkonsole::Session($this_file);
if (not $sk_session->get_password()) {
	my $q = new CGI;
	my $url = $q->url( -full => 1 );

	# we send cookies over secure connections only
	if ($url =~ s/^http:/https:/g) {
		$sk_session->redirect($url);
	} else {
		$sk_session->exit_with_login_page($this_file);
	}
}

my $q = $sk_session->query();


my $projects = Schulkonsole::Info::groups_projects($sk_session->groups());



my $project = $q->param('projects');
if (    $project
    and $$projects{$project}) {
	$sk_session->param('project', $project);
}
$project = $sk_session->param('project');

if (   not $project
    or not $$projects{$project}) {
	my $url = $q->url( -absolute => 1 );
	$url =~ s/$this_file$/project/g;
	$sk_session->redirect($url);
}

if (not Schulkonsole::DB::is_project_admin($$projects{$project}{id},
        	$sk_session->userdata('uidnumber'))) {
	$sk_session->set_status_redirect($sk_session->d()->get(
		'Sie sind kein Projektleiter'),
		1);

	my $url = $q->url( -absolute => 1 );
	$url =~ s/$this_file$/project_members/g;
	$sk_session->redirect($url);
}






my $id = $sk_session->userdata('id');
my $password = $sk_session->get_password();



eval {
if ($q->param('create')) {
	Schulkonsole::Collab::create_repository($id, $password, $project);

	$sk_session->set_status(
		sprintf($sk_session->d()->get('Repository f&uuml;r %s erstellt'),
		        $$projects{$project}{displayname}),
		0);
} elsif ($q->param('drop')) {
	Schulkonsole::Collab::drop_repository($id, $password, $project);

	$sk_session->set_status(
		sprintf($sk_session->d()->get('Repository f&uuml;r %s gel&ouml;scht'),
		        $$projects{$project}{displayname}),
		0);
}
};
if ($@) {
	$sk_session->standard_error_handling($this_file, $@);
}



eval {
my $repositories
	= Schulkonsole::Collab::list_repository($id, $password);
foreach my $repository (@$repositories) {
	if ($repository eq $project) {

=item C<project_repository>

The name of the repository (if existent)

=cut

		$sk_session->set_var('project_repository', $project);
		last;
	}
}
};
if ($@) {
	$sk_session->standard_error_handling($this_file, $@);
}


my @projects;
foreach my $project (sort {
	$$projects{$a}{displayname} cmp $$projects{$b}{displayname} }
	keys %$projects) {
	push @projects, { gid => $project,
	                  name => $$projects{$project}{displayname},
	                };
}

=item C<projects>

Projects of the current user as an array of hashes with the keys

=over

=item C<gid>

GID of the project

=item C<name>

Name of the project

=back

=cut

$sk_session->set_var('projects', \@projects);


=item C<isadmin>

Indicates that the current user is an administrator of the selected project

=cut

$sk_session->set_var('isadmin', 1);

=item C<project_gid>

GID of the selected project

=cut

$sk_session->set_var('project_gid', $project);

=item C<project>

Name of the selected project

=cut

$sk_session->set_var('project', $$projects{$project}{displayname});



$sk_session->print_page("$this_file.shtml", $this_file);


=back

=head2 Form fields

=over

=item C<projects>

Select the project with this GID.
Possible values read in loop over template variable C<projects>.

=item C<create>

Create the repository if true

=item C<drop>

Drop the repository if true

=back

