#! /usr/bin/perl
use strict;
use lib '@datadir@/@PACKAGE@';
use Schulkonsole::Session;
use Schulkonsole::Sophomorix;
use Schulkonsole::SophomorixQuotas;
use Sophomorix::SophomorixAPI;
use Sophomorix::SophomorixConfig;


my $this_file = 'quotas_teachers';




my $sk_session = new Schulkonsole::Session($this_file);
if (not $sk_session->get_password()) {
	my $q = new CGI;
	my $url = $q->url( -full => 1 );

	# we send cookies over secure connections only
	if ($url =~ s/^http:/https:/g) {
		$sk_session->redirect($url);
	} else {
		$sk_session->exit_with_login_page($this_file);
	}
}
if ($Conf::use_quota ne $Schulkonsole::Config::_sophomorix_conf_true) {
	my $q = new CGI;
	my $url = $q->url( -full => 1 );

	$url =~ s/$this_file$/quotas/g;
	$sk_session->redirect($url);
}
$sk_session->set_var('quotaactivated', 1);



my $q = $sk_session->query();

my $id = $sk_session->userdata('id');
my $password = $sk_session->get_password();



my @mountpoints = Schulkonsole::SophomorixQuotas::mountpoints();



eval {
COMMANDS: {
$q->param('acceptteachers') and do {
	my $teachers = get_teachers();

	my $is_changed = 0;
	my @errors;
	my @processed_params;
	foreach my $param ($q->param) {
		if (my ($login, $action) = $param =~ /^(.+)_teacher(.+-diskquota|mailquota)$/) {
			if ($$teachers{$login}) {
				my ($value) = $q->param($param) =~ /^\s*(.+?)\s*$/;
				if ($value !~ /^\d*$/) {
					push @errors, sprintf($sk_session->d()->get(
						'%s: Quota muss eine Zahl sein'), $login);
				} else {
					push @processed_params, $param;

					if ($action =~ /^m/) {	# mailquota
						if (   not defined $$teachers{$login}{mailquota}
						    # differ between "" and "0" => use ne
					        or $$teachers{$login}{mailquota} ne $value) {

							$$teachers{$login}{mailquota} = $value;
							$is_changed++;
						}
					} else {	# diskquota
						my ($mountpoint) = $action =~ /^(.+?)-diskquota$/;
						if (   (    length($value)
						        and not $$teachers{$login}{diskquotas}{$mountpoint})
						    or $$teachers{$login}{diskquotas}{$mountpoint} ne $value) {
							$$teachers{$login}{diskquotas}{$mountpoint} =
								$value;
							$is_changed++;
						}
					}
				}
			} else {
				push @errors, sprintf($sk_session->d()->get(
					'Lehrer %s unbekannt'), $login);
			}
		}
	}

	if (@errors) {
		$sk_session->set_status(join(', ', @errors), 1);
	} elsif ($is_changed) {
		put_teachers($teachers);

		Schulkonsole::Sophomorix::process_quota($id, $password, 2);

		$sk_session->set_status($sk_session->d()->get(
			'&Auml;nderungen &uuml;bernommen.'), 0);
		$q->delete(@processed_params);
	} else {
		$sk_session->set_status($sk_session->d()->get(
			'Keine &Auml;nderungen.'), 1);
	}


	last COMMANDS;
};	# end acceptteachers

} # end COMMANDS
};
if ($@) {
	$sk_session->standard_error_handling($this_file, $@);
}






my $teachers = get_teachers();
my @teachers_array;
foreach my $teacher (sort keys %$teachers) {
	my $diskquotas = $$teachers{$teacher}{diskquotas};
	my @diskquotas;
	foreach my $mountpoint (@mountpoints) {
		push @diskquotas, {
				mountpoint => $mountpoint,
				quota => $$diskquotas{$mountpoint},
			};
	}
	push @teachers_array, {
			login => $$teachers{$teacher}{login},
			surname => $$teachers{$teacher}{surname},
			firstname => $$teachers{$teacher}{firstname},
			diskquotas => \@diskquotas,
			mailquota => $$teachers{$teacher}{mailquota},
		};
}
$sk_session->set_var('teachers', \@teachers_array);


$sk_session->set_var('mountpoints', \@mountpoints);
$sk_session->set_var('mountpoints_cnt', scalar(@mountpoints));


$sk_session->print_page("$this_file.shtml", $this_file);




sub get_teachers {
	my %teachers;

	eval {
	my $teachers_lines
		= Schulkonsole::Sophomorix::read_teachers_file($id, $password);

	foreach my $line (@$teachers_lines) {
		my ($group, $surname, $firstname, $birthdate, $login,
		    $firstpassword, $short,
		    $diskquota, $mailquota) = split /\s*;/, $line;

		my ($key) = $login =~ /^\s*(.+?)\s*$/;

		my $diskquotas =
			Schulkonsole::SophomorixQuotas::split_diskquotas_to_hash(
				$diskquota);
		$mailquota = '' if $mailquota eq $Schulkonsole::SophomorixQuotas::mailquota_undefined;

		if ($key) {
			$teachers{$key} = {
				group => $group,
				surname => $surname,
				firstname => $firstname,
				birthdate => $birthdate,
				login => $login,
				firstpassword => $firstpassword,
				short => $short,
				diskquotas => $diskquotas,
				mailquota => $mailquota,
			};
		}
	}
	};

	return \%teachers;
}



sub put_teachers {
	my $teachers = shift;

	my $defaults = Schulkonsole::SophomorixQuotas::standard_quota('lehrer');

	my @lines;
	foreach my $teacher (sort {
			   $$teachers{$a}{surname} cmp $$teachers{$b}{surname}
			or $$teachers{$a}{firstname} cmp $$teachers{$b}{firstname}
		} keys %$teachers) {
		next if $$teachers{$teacher}{delete};

		my $mailquota = $$teachers{$teacher}{mailquota};

		my $line = $$teachers{$teacher}{group} . ';'
			. $$teachers{$teacher}{surname} . ';'
			. $$teachers{$teacher}{firstname} . ';'
			. $$teachers{$teacher}{birthdate} . ';'
			. $$teachers{$teacher}{login} . ';'
			. $$teachers{$teacher}{firstpassword} . ';'
			. $$teachers{$teacher}{short} . ';'
			. Schulkonsole::SophomorixQuotas::hash_to_quotastring(
			  	$$teachers{$teacher}{diskquotas}, $defaults) . ';'
			. (length($mailquota) ? $mailquota : $Schulkonsole::SophomorixQuotas::mailquota_undefined) . ';'
			. "\n";
		push @lines, $line;

	}

	Schulkonsole::Sophomorix::write_teachers_file($id, $password, \@lines);
}

