#! /usr/bin/perl

=head1 NAME

settings - produces start page for settings

=head1 SYNOPSIS

 https://server/schulkonsole/settings

=head1 DESCRIPTION

C<settings> produces the start page of settings.
The HTML template is settings.tt.

=head2 Template variables

Additionally to the variables of Schulkonsole::Session C<settings>
provides the following variables:

=over

=cut

use strict;
use utf8;
use lib '/usr/share/schulkonsole';
use open ':utf8';
use Env::Bash;
use Schulkonsole::Encode;
use Schulkonsole::Files;
use Schulkonsole::Session;
use Schulkonsole::Sophomorix;
use Sophomorix::SophomorixAPI;
use Sophomorix::SophomorixConfig;


my $this_file = 'settings';

my $true = $Schulkonsole::Config::_sophomorix_conf_true;
my $false = $Schulkonsole::Config::_sophomorix_conf_false;


my $sk_session = new Schulkonsole::Session($this_file);
if (not $sk_session->get_password()) {
	my $q = new CGI;
	my $url = $q->url( -full => 1 );

	# we send cookies over secure connections only
	if ($url =~ s/^http:/https:/g) {
		$sk_session->redirect($url);
	} else {
		$sk_session->exit_with_login_page($this_file);
	}
}

my $q = $sk_session->query();


my $id = $sk_session->userdata('id');
my $password = $sk_session->get_password();




my @mountpoints;
my %mountpoints_seen;
if (    @Conf::quota_filesystems
    and $Conf::quota_filesystems[0] ne 'auto') {
	@mountpoints = @Conf::quota_filesystems;
} else {
	use Quota;

	Quota::setmntent();
	while (my ($dev, $path, $type, $opts) = Quota::getmntent()) {
		if ($opts =~ /usrquota/) {
		    if (not exists $mountpoints_seen{$dev}){
			push @mountpoints, $path;
			$mountpoints_seen{$dev}="$path";
		    }
		}
	}
	Quota::endmntent();
}



# boolean values in sophomorix.conf are only defined if true in query
# and are represented with $true and $false in sophomorix.conf

=item C<filterstarclass>

True if splan_sternchenklassen_filtern in F<sophomorix.conf> is true

=item C<activaterandompasswordstudent>

True if schueler_zufall_passwort in F<sophomorix.conf> is true

=item C<activaterandompasswordteacher>

True if lehrer_zufall_passwort in F<sophomorix.conf> is true

=item C<changesmbpasswordstudent>

True if student_samba_pw_must_change in F<sophomorix.conf> is true

=item C<changesmbpasswordteacher>

True if teacher_samba_pw_must_change in F<sophomorix.conf> is true

=item C<activatequota>

True if use_quota in F<sophomorix.conf> is true

=item C<activatesshstudent>

True if schueler_per_ssh in F<sophomorix.conf> is true

=item C<activatesshteacher>

True if lehrer_per_ssh in F<sophomorix.conf> is true

=cut

my %sophomorix_conf_bool_in_form = (
	filterstarclass => 1,
	activaterandompasswordstudent => 1,
	activaterandompasswordteacher => 1,
	changesmbpasswordstudent => 1,
	changesmbpasswordteacher => 1,
	activatequota => 1,
	activatesshstudent => 1,
	activatesshteacher => 1,
);




my %sophomorix_conf = read_sophomorix_conf();
my %quota_conf = read_quota_conf();
my %filesystem_conf = read_filesystem_conf();
my %sophomorix_conf_new;
my %quota_conf_new;
my %filesystem_conf_new;


if ($q->param('accept')) {
	eval {
	my @errors;
	foreach my $param ($q->param) {
		if (defined $sophomorix_conf{$param}) {
			if ($sophomorix_conf_bool_in_form{$param}) {
				if (not $sophomorix_conf{$param}) {
					$sophomorix_conf_new{$param} = 1;
				}
			} else {
				my $value = $q->param($param);
				if ($sophomorix_conf{$param} ne $value) {
					CHECKVALUE: {
					$param =~ /^birthlimit/ and do {
						if (   $value < 1900
						    or $value > 3000) {
							$sk_session->mark_input_error('birthlimitlow');
							push @errors, $sk_session->d()->get(
								'Geben Sie eine g&uuml;ltige 4-stellige Jahreszahl ein');
						}
						last CHECKVALUE;
					};
					$param =~ /^randompasswordlength/ and do {
						if ($value < 1) {
							$sk_session->mark_input_error($param);
							push @errors, $sk_session->d()->get(
								'Die Passwortl&auml;nge muss eine Zahl > 0 sein');
						}
						last CHECKVALUE;
					};
					$param =~ /^tolerate/ and do {
						if ($value !~ /^\d+$/) {
							$sk_session->mark_input_error($param);
							push @errors, $sk_session->d()->get(
								'Der Duldungszeitraum muss eine Zahl sein');
						}
						last CHECKVALUE;
					};
					$param =~ /^deactivate/ and do {
						if ($value !~ /^\d+$/) {
							$sk_session->mark_input_error($param);
							push @errors, $sk_session->d()->get(
								'Der Deaktivierungszeitraum muss eine Zahl sein');
						}
						last CHECKVALUE;
					};
					}
					$sophomorix_conf_new{$param} = $q->param($param);
				}
			}
		} elsif (defined $quota_conf{$param}) {
			my $value = $q->param($param);
			$value =~ s/\s+//g;
			if ($quota_conf{$param} ne $value) {
				if ($value !~ /^\d+$/) {
					$sk_session->mark_input_error($param);
					push @errors, $sk_session->d()->get('Quota muss eine Zahl sein');
				}
				$quota_conf_new{$param} = $value;
			}
		} elsif (defined $filesystem_conf{$param}) {
			if (not $filesystem_conf{$param}) {
				$filesystem_conf_new{$param} = 1;
			}
		}
	}

	# set undefined boolean values to false
	foreach my $param (keys %sophomorix_conf_bool_in_form) {
		if (    not defined $q->param($param)
		    and $sophomorix_conf{$param}) {
			$sophomorix_conf_new{$param} = 0;
		}
	}
	foreach my $param (keys %filesystem_conf) {
		if (    not defined $q->param($param)
		    and $filesystem_conf{$param}) {
			$filesystem_conf_new{$param} = 0;
		}
	}

	# commit changes
	if (@errors) {
		$sk_session->set_status(join(', ', @errors), 1);
	} else {
		my $is_changed = 0;
		my $do_quota_set = 0;
		my $do_quota_student = 0;
		my $do_quota_teacher = 0;

		if (%sophomorix_conf_new) {
			my $lines = new_sophomorix_lines(\%sophomorix_conf_new);
			Schulkonsole::Sophomorix::write_sophomorix_conf(
				$id, $password, $lines);

			$do_quota_set = 1 if exists $sophomorix_conf_new{activatequota};

			$is_changed = 1;
		}
		if (%quota_conf_new) {
			my $lines = new_quota_lines(\%quota_conf_new, \%quota_conf);
			Schulkonsole::Sophomorix::write_quota_conf(
				$id, $password, $lines);

			foreach my $key (keys %quota_conf_new) {
				if ($key =~ /student$/) {
					$do_quota_student = 1;
				} else {
					$do_quota_teacher = 1;
				}
			}

			$is_changed = 1;
		}
		if (%filesystem_conf_new) {
			if (defined $filesystem_conf_new{activateglobalshares}) {
				if ($filesystem_conf_new{activateglobalshares}) {
					Schulkonsole::Sophomorix::global_shares_on($id, $password);
				} else {
					Schulkonsole::Sophomorix::global_shares_off($id, $password);
				}
			}
			$is_changed = 1;
		}

		if ($is_changed) {
			Schulkonsole::Sophomorix::process_quota($id, $password,
				  ($do_quota_set)
				| ($do_quota_teacher << 1)
				| ($do_quota_student << 2));

			$sk_session->set_status(
				$sk_session->d()->get('&Auml;nderungen &uuml;bernommen'), 0);
		}
	}
	};
	if ($@) {
		$sk_session->standard_error_handling($this_file, $@);
	}
}



# pre-set values for <form>
foreach my $key (keys %sophomorix_conf) {
	if (defined $sophomorix_conf_new{$key}) {
		if ($sophomorix_conf_bool_in_form{$key}) {
			$sk_session->set_var($key, $sophomorix_conf_new{$key});
		} else {
			$q->param($key, $sophomorix_conf_new{$key});
		}
	} else {
		if ($sophomorix_conf_bool_in_form{$key}) {
			$sk_session->set_var($key, $sophomorix_conf{$key});
		} else {
			$q->param($key, $sophomorix_conf{$key});
		}
	}
}
foreach my $key (keys %quota_conf) {
	if (defined $quota_conf_new{$key}) {
		$q->param($key, $quota_conf_new{$key});
	} else {
		$q->param($key, $quota_conf{$key});
	}
}



=item C<mountpoints>

An array with the mountpoints

=cut

$sk_session->set_var('mountpoints', \@mountpoints);
foreach my $key (keys %filesystem_conf) {
	if (defined $filesystem_conf_new{$key}) {
		$sk_session->set_var($key, $filesystem_conf_new{$key});
	} else {
		$sk_session->set_var($key, $filesystem_conf{$key});
	}
}




$sk_session->print_page("$this_file.tt", $this_file);




=back

=head2 Form fields

=over

=item C<accept>

Write the changes

=cut



sub read_sophomorix_conf {

=item C<birthlimitlow>

corresponds to geburts_jahreszahl_start in F<sophomorix.conf>

=item C<birthlimitup>

corresponds to geburts_jahreszahl_stop in F<sophomorix.conf>

=item C<birthlimitup>

corresponds to geburts_jahreszahl_stop in F<sophomorix.conf>

=item C<filterstarclass>

corresponds to splan_sternchenklassen_filtern in F<sophomorix.conf>

=item C<activaterandompasswordstudent>

corresponds to schueler_zufall_passwort in F<sophomorix.conf>

=item C<randompasswordlengthstudent>

corresponds to zufall_passwort_anzahl_schueler in F<sophomorix.conf>

=item C<activatesshstudent>

corresponds to schueler_per_ssh in F<sophomorix.conf>

=item C<changesmbpasswordstudent>

corresponds to student_samba_pw_must_change in F<sophomorix.conf>

=item C<activaterandompasswordteacher>

corresponds to lehrer_zufall_passwort in F<sophomorix.conf>

=item C<randompasswordlengthteacher>

corresponds to zufall_passwort_anzahl_lehrer in F<sophomorix.conf>

=item C<activatesshteacher>

corresponds to lehrer_per_ssh in F<sophomorix.conf>

=item C<changesmbpasswordteacher>

corresponds to teacher_samba_pw_must_change in F<sophomorix.conf>

=item C<toleratestudent>

corresponds to schueler_duldung_tage in F<sophomorix.conf>

=item C<tolerateteacher>

corresponds to lehrer_duldung_tage in F<sophomorix.conf>

=item C<deactivatestudent>

corresponds to schueler_deaktivierung_tage in F<sophomorix.conf>

=item C<deactivateteacher>

corresponds to lehrer_deaktivierung_tage in F<sophomorix.conf>

=item C<activatequota>

corresponds to use_quota in F<sophomorix.conf>

=cut

	return (
#		schoolname => $Conf::schul_name,
		birthlimitlow => $Conf::geburts_jahreszahl_start,
		birthlimitup => $Conf::geburts_jahreszahl_stop,
#		swap_name => $Conf::vorname_nachname_tausch,
#		student_per_class_min => $Conf::mindest_schueler_anzahl_pro_klasse,
#		student_per_class_max => $Conf::maximale_schueler_anzahl_pro_klasse,
		filterstarclass => ($Conf::splan_sternchenklassen_filtern eq $true),
#		correctsemicolon => ($Conf::drei_strichpunkt eq $true),
#		loginlengthfamilystudent => $Conf::schueler_login_nachname_zeichen,
#		loginlengthfirststudent => $Conf::schueler_login_vorname_zeichen,
		activaterandompasswordstudent => ($Conf::schueler_zufall_passwort eq $true),
		randompasswordlengthstudent => $Conf::zufall_passwort_anzahl_schueler,
		activatesshstudent => ($Conf::schueler_per_ssh eq $true),
		changesmbpasswordstudent => ($Conf::student_samba_pw_must_change eq $true),
		activaterandompasswordteacher => ($Conf::lehrer_zufall_passwort eq $true),
		randompasswordlengthteacher => $Conf::zufall_passwort_anzahl_lehrer,
		activatesshteacher => ($Conf::lehrer_per_ssh eq $true),
		changesmbpasswordteacher => ($Conf::teacher_samba_pw_must_change eq $true),
		toleratestudent => $Conf::schueler_duldung_tage,
		tolerateteacher => $Conf::lehrer_duldung_tage,
		deactivatestudent => $Conf::schueler_deaktivierung_tage,
		deactivateteacher => $Conf::lehrer_deaktivierung_tage,
#		mailaliaspattern => $Conf::mail_aliases,
#		loglevel => $Conf::log_level,
		activatequota => ($Conf::use_quota eq $true),
	);
}




sub read_quota_conf {
	my %re;

=item C<${mountpoints}_quotateacher>

Created in loop over template variable C<mountpoints>.
The values as a plus sign separated list correspond to the value of
standard-lehrer in F<quota.txt>

=item C<${mountpoints}_quotastudent>

Created in loop over template variable C<mountpoints>.
The values as a plus sign separated list correspond to the value of
standard-schueler in F<quota.txt>

=cut

	my %key_map = (
		quotateacher => 'standard-lehrer',
		quotastudent => 'standard-schueler',
#		quotaworkstation => 'standard-workstations',
	);


	if (open QUOTACONF, '<',
	         Schulkonsole::Encode::to_fs("$DevelConf::config_pfad/quota.txt")) {
		flock QUOTACONF, 1;

		my %quotas;
		while (<QUOTACONF>) {
			chomp;
			s/\s+//g;
			next if (not $_ or /^#/);

			my ($key, $quota) = /^(\S+):(\d.+)$/;

			$quotas{$key} = $quota;
		}

		close QUOTACONF;


		my $insert_value = sub {
			my $quota = shift;

			my @quotas = split '\+', $quotas{$key_map{$quota}};
			if ($#quotas != $#mountpoints) {
				foreach my $mountpoint (@mountpoints) {
					$re{"${mountpoint}_$quota"} = 0;
				}
			} else {
				foreach my $mountpoint (@mountpoints) {
					$re{"${mountpoint}_$quota"} = shift @quotas;
				}
			}
		};

		foreach my $key (keys %key_map) {
			&$insert_value($key);
		}


	} else {
		print STDERR "Cannot open $DevelConf::config_pfad/quota.txt\n";

		foreach my $quota (keys %key_map) {
			foreach my $mountpoint (@mountpoints) {
				$re{"${mountpoint}_$quota"} = -1;
			}
		}
	}

	return %re;
}




sub read_filesystem_conf {
	my @stat = stat $DevelConf::share_school;
	my $perm_share_school = $stat[2];

=item C<activateglobalshares>

True if shares are accessible

=cut

	return (
		activateglobalshares => $perm_share_school & 077,
	);
}




sub new_sophomorix_lines {
	my $new = shift;

	my %key_map = (
#		schoolname => 'schul_name',
		birthlimitlow => 'geburts_jahreszahl_start',
		birthlimitup => 'geburts_jahreszahl_stop',
#		swap_name => 'vorname_nachname_tausch',
#		student_per_class_min => 'mindest_schueler_anzahl_pro_klasse',
#		student_per_class_max => 'maximale_schueler_anzahl_pro_klasse',
		filterstarclass => 'splan_sternchenklassen_filtern',
#		correctsemicolon => 'drei_strichpunkt',
#		loginlengthfamilystudent => 'schueler_login_nachname_zeichen',
#		loginlengthfirststudent => 'schueler_login_vorname_zeichen',
		activaterandompasswordstudent => 'schueler_zufall_passwort',
		randompasswordlengthstudent => 'zufall_passwort_anzahl_schueler',
		activatesshstudent => 'schueler_per_ssh',
		changesmbpasswordstudent => 'student_samba_pw_must_change',
		activaterandompasswordteacher => 'lehrer_zufall_passwort',
		randompasswordlengthteacher => 'zufall_passwort_anzahl_lehrer',
		activatesshteacher => 'lehrer_per_ssh',
		changesmbpasswordteacher => 'teacher_samba_pw_must_change',
		toleratestudent => 'schueler_duldung_tage',
		tolerateteacher => 'lehrer_duldung_tage',
		deactivatestudent => 'schueler_deaktivierung_tage',
		deactivateteacher => 'lehrer_deaktivierung_tage',
#		mailaliaspattern => 'mail_aliases',
#		loglevel => 'log_level',
		activatequota => 'use_quota',
	);

	if (open SOPHOMORIXCONF, '<',
	         Schulkonsole::Encode::to_fs(
	         	"$DevelConf::config_pfad/sophomorix.conf")) {
		my @lines;
		my %new = %$new;

		while (my $line = <SOPHOMORIXCONF>) {
			foreach my $new_key (keys %new) {
				my $key = $key_map{$new_key};
				next unless $key;

				if ($line =~ /^\s*\$$key\s*=/) {
					my $value = $new{$new_key};
					if ($sophomorix_conf_bool_in_form{$new_key}) {
						$line =
							"\$$key = '" . ($value ? $true : $false) . "';\n";
					} else {
						if ($value =~ /^\d+$/) {
							$line = "\$$key = $value;\n";
						} else {
							$line = "\$$key = '$value';\n";
						}
					}
					delete $new{$new_key};

					last;
				}
			}
			push @lines, $line;
		}

		if (%new) {
			push @lines, "# schulkonsole\n";

			my $line;
			foreach my $new_key (keys %new) {
				my $key = $key_map{$new_key};
				next unless $key;

				my $value = $new{$new_key};
				if ($value =~ /^\d+$/) {
					$line = "\$$key = $value;\n";
				} else {
					$line = "\$$key = '$value';\n";
				}
				push @lines, $line;
			}
		}


		return \@lines;
	} else {
		die new Schulkonsole::Error(Schulkonsole::Error::CANNOT_OPEN_FILE,
			"$DevelConf::config_pfad/sophomorix.conf");
	}
}




sub new_quota_lines {
	my $new = shift;
	my $old = shift;

	my %key_map = (
		quotateacher => 'standard-lehrer',
		quotastudent => 'standard-schueler',
#		quotaworkstation => 'standard-workstations',
	);



	my %new;
	foreach my $key (keys %key_map) {
		my $is_new = 0;
		my @values;
		foreach my $mountpoint (@mountpoints) {
			my $new_value = $$new{"${mountpoint}_$key"};
			if (length $new_value) {
				push @values, $new_value;
				$is_new = 1;
			} else {
				push @values, $$old{"${mountpoint}_$key"}
			}
		}

		$new{$key} = join '+', @values if $is_new;
	}

	my @lines;
	if (open QUOTACONF, '<',
	         Schulkonsole::Encode::to_fs("$DevelConf::config_pfad/quota.txt")) {

		while (my $line = <QUOTACONF>) {
			foreach my $new_key (keys %new) {
				my $key = $key_map{$new_key};
				if ($line =~ /^\s*$key\s*:/) {
					$line = "$key: $new{$new_key}\n";
					delete $new{$new_key};

					last;
				}
			}
			push @lines, $line;
		}
	}

	if (%new) {
		push @lines, "# schulkonsole\n";

		my $line;
		foreach my $new_key (keys %new) {
			push @lines, "$key_map{$new_key}: $new{$new_key}\n";
		}
	}


	return \@lines;
}

=back
