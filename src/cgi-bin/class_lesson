#! /usr/bin/perl
#
# $Id$
#

=head1 NAME

class_lesson - overview of class lessons

=head1 SYNOPSIS

 https://server/schulkonsole/class_lesson

=head1 DESCRIPTION

C<class_lesson> lets you select a class, start a lesson in a class
and control WLAN access for the selected class.
The HTML template is class_lesson.tt.

=head2 Template variables

Additionally to the variables of Schulkonsole::Session and
Schulkonsole::Lesson::set_vars() C<class_lesson> provides the following variables:

=cut

use strict;
use utf8;
use lib '/usr/share/schulkonsole';
use Time::Local;
use POSIX;
use Schulkonsole::Config;
use Schulkonsole::DB;
use Schulkonsole::Session;
use Schulkonsole::Radius;
use Schulkonsole::Sophomorix;
use Schulkonsole::Info;
use Schulkonsole::Lesson;
use Data::Dumper;

my $this_file = 'class_lesson';

my $sk_session = new Schulkonsole::Session($this_file);
if (not $sk_session->get_password()) {
	my $q = new CGI;
	my $url = $q->url( -full => 1 );

	# we send cookies over secure connections only
	if ($url =~ s/^http:/https:/g) {
		$sk_session->redirect($url);
	} else {
		$sk_session->exit_with_login_page($this_file);
	}
}

my $q = $sk_session->query();

my $classs = Schulkonsole::Info::groups_classes($sk_session->groups());
my $class = $q->param('classes');
if (    $class
    and $$classs{$class}) {
        $sk_session->param('class', $class);
}
$class = $sk_session->param('class');

if (   not $class
    or not $$classs{$class}) {
        my $url = $q->url( -absolute => 1 );
        $url =~ s/$this_file$/class/g;
		$sk_session->param('requested_page',$this_file);
        $sk_session->redirect($url);
}

$sk_session->param('group',$class);
$sk_session->param('groupkind','Klasse');

my $class_userdatas = Schulkonsole::DB::get_class_userdatas($class);

=head2 Form fields

none


=head2 Template variables

Additionally to the variables of Schulkonsole::Session C<class_lesson>
provides the following variables:

=over

=cut

my $group_session = new Schulkonsole::Lesson($sk_session);


if ($group_session) {

	my $group = $group_session->info('name');
	my $id = $sk_session->userdata('id');
	my $password = $sk_session->get_password();

	my $editing_userdata = $group_session->info('editing_userdata');
	my $editing_user = $$editing_userdata{uid};
	
# perform commands
	
	
	COMMANDS: { eval {
	if ($q->param('acceptlesson')) {
		if (not $group_session->info('is_editing')) {
			if (not $group_session->param('edit')) {
				$sk_session->set_status(
					$sk_session->d()->get(
						"In dieser Klasse Projekt findet kein Unterricht statt."),
					1);
			} else {
				$sk_session->set_status(
					$sk_session->d()->get(
						"Sie halten keinen Unterricht in dieser Klasse."),
					1);
			}
			last COMMANDS;
		}
	
		my $wlan_allowed = Schulkonsole::Radius::allowed_groups_users_wlan($id, $password);
		
		my @allow_wlan;
		my @deny_wlan;
		
		foreach my $user (keys %$class_userdatas){
			if ($q->param("$user;wlan") and not $$wlan_allowed{'users'}{$user}) {
				push @allow_wlan, $user;
			} elsif ($$wlan_allowed{'users'}{$user} and not defined $q->param("$user;wlan")) {
				push @deny_wlan, $user;
			}
		}
		
		eval {
	       	Schulkonsole::Radius::wlan_on($id, $password,[],\@allow_wlan) if @allow_wlan;
    	   	Schulkonsole::Radius::wlan_off($id, $password,[],\@deny_wlan) if @deny_wlan;
		};
		if ($@) {
			$sk_session->standard_error_handling($this_file, $@);
		}
	
		$sk_session->set_status(
			$sk_session->d()->get("Änderungen übernommen."), 0);
			
	} elsif ($q->param('start_lesson')) {
		if ($group_session->param('edit')) {
			$sk_session->set_status(
				$sk_session->d()->get("In dieser Klasse wird bereits unterrichtet."),
				1);
			last COMMANDS;
		}
	
	
		$group_session->start_lesson($id, $password);
	
		$editing_user = $sk_session->userdata('uid');
	
	
		$sk_session->set_status($sk_session->d()->get("Unterricht begonnen.")
			. ' ' . POSIX::strftime(
			  	$sk_session->d()->get("Unterrichtsende um %H:%M"),
			  	localtime($group_session->param('end_time'))),
			0);
	} elsif ($q->param('end_lesson_now')) {
		if (not $group_session->info('is_allowed_stopedit')) {
			if (not $group_session->param('edit')) {
				$sk_session->set_status(
					$sk_session->d()->get(
						"In dieser Klasse findet kein Unterricht statt."),
				1);
			} else {
				$sk_session->set_status(
					$sk_session->d()->get(
						"Sie dürfen den Unterricht in dieser Klasse nicht beenden."),
					1);
			}
			last COMMANDS;
		}
	
		$group_session->end_lesson_now($id, $password);
	
		$sk_session->set_status(
			$sk_session->d()->get('Unterricht beendet.'), 0);
	
	
	} elsif ($q->param('end_lesson_at')) {
		if (not $group_session->info('is_editing')) {
			if (not $group_session->param('edit')) {
				$sk_session->set_status(
					$sk_session->d()->get(
						'In dieser Klasse findet kein Unterricht statt.'),
					1);
			} else {
				$sk_session->set_status(
					$sk_session->d()->get(
						'Sie dürfen den Unterricht in dieser Klasse nicht beenden.'),
					1);
			}
			last COMMANDS;
		}

		my @end_time = localtime($^T);
		$end_time[2] = $q->param('lesson_end_hours');
		$end_time[1] = $q->param('lesson_end_minutes');
		$end_time[0] = 0;
	
		my $end_time = Time::Local::timelocal(@end_time);
	
		if ($end_time < $^T) {
			$sk_session->set_status(
				$sk_session->d()->get("Unterrichtsende liegt in der Vergangenheit"),
				1);
		} else {
			$group_session->end_lesson_at($id, $password, $end_time);
			$group_session = new Schulkonsole::Lesson($sk_session);
	
			$sk_session->set_status(
				POSIX::strftime(
					$sk_session->d()->get("Unterrichtsende um %H:%M"), @end_time),
				0);
		}
	}
	
	}; } # end COMMANDS
	if ($@) {
		$sk_session->standard_error_handling($this_file, $@);
	}
	
	
	
	# collect data for output
	eval {
		my $wlan_allowed =
			Schulkonsole::Radius::allowed_groups_users_wlan($id, $password);

		my @students;
		foreach my $user (sort {
			$$class_userdatas{$a}{surname} cmp $$class_userdatas{$b}{surname} }
			keys %$class_userdatas) {
		
			my $student = {
				login => $user,
				firstname => $$class_userdatas{$user}{firstname},
				surname => $$class_userdatas{$user}{surname},
				wlan => $$wlan_allowed{'users'}{$user}? 1 : 0,
			};
			push @students, $student;
		}
	
=item C<students>

An array of hashes with the keys

=over

=item C<login>

The login of a user

=item C<firstname>

The user's first name

=item C<surname>

The user's surname

=item C<wlan>

The user's wlan status (allowed-1/forbidden-0)

=back

=cut

	$sk_session->set_var('students', \@students);

	};
	if ($@) {
		$sk_session->standard_error_handling($this_file, $@);
	}
	
	$group_session->set_vars($sk_session);
	
	# pre-set form fields with suggested values for lesson end time
	my $start_time = $group_session->param('start_time');
	if ($start_time) {
		my @suggested_end_time = localtime($start_time + 90 * 60);
		$q->param('lesson_end_hours', $suggested_end_time[2]);
		$q->param('lesson_end_minutes', int($suggested_end_time[1] / 5) * 5);
	}
}


my @classs;
foreach my $class (sort {
    $$classs{$a}{displayname} cmp $$classs{$b}{displayname} } keys %$classs) {
        push @classs, { gid => $class,
                        name => $$classs{$class}{displayname} };
}

=item C<classes>

An array of hashes of the classes of which the current user is a member
with the keys

=over

=item C<gid>

The GID of the class

=item C<name>

The name of the class

=back

=cut

$sk_session->set_var('classes', \@classs);


=item C<class_name>

The name of the class

=cut

$sk_session->set_var('class_name', $$classs{$class}{displayname});

$sk_session->print_page("$this_file.tt", $this_file);


=back

=head2 Form fields

=over

=item C<end_lesson_now>

End lesson at once (reset network and share settings)

=item C<end_lesson_at>

Set a time to end the lesson (reset network and share settings)

=item C<start_lesson>

Start a lesson in the room (and allow changes to network and share settings)

=item C<acceptlesson>

Accept new wlan settings

=over

=item C<group;wlan>

Checkbox created for template variable C<group_wlan>.
True if the group shall access the wlan

=back

