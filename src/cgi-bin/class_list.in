#! /usr/bin/perl

=head1 NAME

class_list - list of class members

=head1 SYNOPSIS

 https://server/schulkonsole/class_list

=head1 DESCRIPTION

C<class_list> displays a list of all members in a selected class.
The HTML template is class_list.tt.

=cut

use strict;
use lib '@datadir@/@PACKAGE@';
use Schulkonsole::Cyrus;
use Schulkonsole::DB;
use Schulkonsole::Info;
use Schulkonsole::Printer;
use Schulkonsole::Session;

my $this_file = 'class_list';


my $sk_session = new Schulkonsole::Session($this_file);
if (not $sk_session->get_password()) {
	my $q = new CGI;
	my $url = $q->url( -full => 1 );

	# we send cookies over secure connections only
	if ($url =~ s/^http:/https:/g) {
		$sk_session->redirect($url);
	} else {
		$sk_session->exit_with_login_page($this_file);
	}
}

my $q = $sk_session->query();

my $classs = Schulkonsole::Info::groups_classes($sk_session->groups());
my $class = $q->param('classes');
if (    $class
    and $$classs{$class}) {
	$sk_session->param('class', $class);
}
$class = $sk_session->param('class');

if (   not $class
    or not $$classs{$class}) {
	my $url = $q->url( -absolute => 1 );
	$url =~ s/$this_file$/class/g;
	$sk_session->redirect($url);
}


=head2 Form fields

none


=head2 Template variables

Additionally to the variables of Schulkonsole::Session C<class_list>
provides the following variables:

=over

=cut


my $id = $sk_session->userdata('id');
my $password = $sk_session->get_password();

my $class_userdatas = Schulkonsole::DB::get_class_userdatas($class);
my $user_quotaroots = Schulkonsole::Cyrus::quota(keys %$class_userdatas);

my @students;
foreach my $user (sort {
	$$class_userdatas{$a}{surname} cmp $$class_userdatas{$b}{surname} }
	keys %$class_userdatas) {

	my $quotaemail_usage;
	my $quotaemail_limit;
	my $quotaemail_percent;
	if ($$user_quotaroots{$user}) {
		$quotaemail_usage
			= $$user_quotaroots{$user}{"user.$user"}{quota}{STORAGE}{usage};
		$quotaemail_limit
			= $$user_quotaroots{$user}{"user.$user"}{quota}{STORAGE}{limit};
		$quotaemail_percent = sprintf("%.1f", 100 *
		                              $quotaemail_usage / $quotaemail_limit);
	} else {
		$quotaemail_percent = '0.0';
	}


	my $disk_quotas =
		Schulkonsole::Info::disk_quotas($$class_userdatas{$user}{uidnumber});

	my @array_diskquotas;
	foreach my $disk_quota (@$disk_quotas) {
	    my ($filesystem, $path,
		    $blocks_usage, $blocks_soft, $blocks_hard,
		    $blocks_grace,
		    $files_usage, $files_soft, $files_hard,
		    $files_grace) = @$disk_quota;
		next unless (defined $files_hard and ($blocks_hard or $files_hard));

		my $blocks_percent = $blocks_soft ?
			  sprintf('%.1f', 100 * $blocks_usage / $blocks_soft)
			: 0;
		my $files_percent = $files_soft ?
			  sprintf('%.1f', 100 * $files_usage / $files_soft)
			: 0;

		my $blocks_grace_str;
		if ($blocks_grace) {
			$blocks_grace -= $^T;
			if ($blocks_grace > 86400) {
				$blocks_grace_str = sprintf($sk_session->d()->get('%d Tage'),
					$blocks_grace / 86400 + 0.5);
			} elsif ($blocks_grace > 7200) {
				$blocks_grace_str = sprintf($sk_session->d()->get('%d Stunden'),
					$blocks_grace / 3600 + 0.5);
			} elsif ($blocks_grace > 0) {
				$blocks_grace_str = sprintf($sk_session->d()->get('%d Minuten'),
					$blocks_grace / 60 + 0.5);
			} else {
				$blocks_grace_str = $sk_session->d()->get('abgelaufen');
			}
		} else {
			$blocks_grace_str = '-';
		}
	
		my $files_grace_str;
		if ($files_grace) {
			$files_grace -= $^T;
			if ($files_grace > 86400) {
				$files_grace_str = sprintf($sk_session->d()->get('%d Tage'),
					$files_grace / 86400 + 0.5);
			} elsif ($files_grace > 7200) {
				$files_grace_str = sprintf($sk_session->d()->get('%d Stunden'),
					$files_grace / 3600 + 0.5);
			} elsif ($files_grace > 0) {
				$files_grace_str = sprintf($sk_session->d()->get('%d Minuten'),
					$files_grace / 60 + 0.5);
			} else {
				$files_grace_str = $sk_session->d()->get('abgelaufen');
			}
		} else {
			$files_grace_str = '-';
		}

		my $diskquota = {
			'warn' => $blocks_grace || $files_grace,
			path => $path,
			blocks_usage => $blocks_usage,
			blocks_soft => $blocks_soft,
			blocks_hard => $blocks_hard,
			blocks_percent => $blocks_percent,
			blocks_percent_rounded => ($blocks_percent < 100.0 ?
			                             int($blocks_percent + 0.5)
			                           : 100),
			blocks_grace => $blocks_grace_str,
			files_usage => $files_usage,
			files_soft => $files_soft,
			files_hard => $files_hard,
			files_percent => $files_percent,
			files_percent_rounded => ($files_percent < 100.0 ?
			                            int($files_percent + 0.5)
			                          : 100),
			files_grace => $files_grace_str,
		};

		push @array_diskquotas, $diskquota;
	}


	my $mailquotas =  {
		usage => $quotaemail_usage,
		limit => $quotaemail_limit,
		percent => $quotaemail_percent,
		percent_rounded => ($quotaemail_percent < 100.0 ?
		                      int($quotaemail_percent + 0.5)
		                    : 100),
		'warn' => ($quotaemail_usage > $quotaemail_limit)
	};





	my $groups = Schulkonsole::DB::user_groups(
		$$class_userdatas{$user}{uidnumber},
		$$class_userdatas{$user}{gidnumber},
		$$class_userdatas{$user}{gid});
	my @projects;
	my $projects = Schulkonsole::Info::groups_projects($groups);
	foreach my $project (values %$projects) {
		push @projects, $$project{displayname};
	}
	my $projects_str = join ', ', @projects;


	my $student = {
		login => $user,
		firstname => $$class_userdatas{$user}{firstname},
		surname => $$class_userdatas{$user}{surname},
		diskquotas => \@array_diskquotas,
		mailquotas => $mailquotas,
		subclass => $$class_userdatas{$user}{subclass},
		projects_str => $projects_str,
	};
	push @students, $student;
}

=item C<students>

An array of hashes with the keys

=over

=item C<login>

The login of a user

=item C<firstname>

The user's first name

=item C<surname>

The user's surname

=item C<diskquotas>

The user's disk quotas in an array of hashes with the keys

=over

=item C<path>

A file path

=item C<blocks_usage>

The user's blocks usage in this path

=item C<blocks_soft>

The user's soft blocks limit for this path

=item C<blocks_hard>

The user's hard blocks limit for this path

=item C<blocks_percent>

The user's blocks usage in percent in this path

=item C<blocks_percent_rounded>

The user's blocks usage in percent in this path rounded to an integer

=item C<blocks_grace>

Time for this user to get below soft blocks limit

=item C<files_usage>

The user's file usage in this path

=item C<files_soft>

The user's soft files limit for this path

=item C<files_hard>

The user's hard files limit for this path

=item C<files_percent>

The user's files usage in percent in this path

=item C<files_percent_rounded>

The user's files usage in percent in this path rounded to an integer

=item C<files_grace>

Time for this user to get below soft files limit

=item C<warn>

True if over blocks or files quota

=back

=item C<mailquotas>

The user's INBOX mail quota in a hash with the keys

=over

=item C<usage>

The user's INBOX usage

=item C<limit>

The user's INBOX limit

=item C<percent>

The user's INBOX usage in percent

=item C<percent_rounded>

The user's INBOX usage in percent rounded to an integer

=item C<warn>

True if user is over quota

=back

=item C<printquotas>

The user's print quota in a hash with the keys

=over

=item C<usage>

The user's printed pages

=item C<limit>

The user's maximum allowed pages

=item C<percent>

The user's print quota usage in percent

=item C<percent_rounded>

The user's print quota usage in percent rounded to an integer

=back

=item C<subclass>

The subclass to which the user is assigned

=item C<projects_str>

The user's projects in a comma separated list

=back

=cut

$sk_session->set_var('students', \@students);



my @classs;
foreach my $class (sort {
    $$classs{$a}{displayname} cmp $$classs{$b}{displayname} } keys %$classs) {
	push @classs, { gid => $class,
	                name => $$classs{$class}{displayname} };
}

=item C<classes>

An array of hashes of the classes of which the current user is a member
with the keys

=over

=item C<gid>

The GID of the class

=item C<name>

The name of the class

=back

=cut

$sk_session->set_var('classes', \@classs);


=item C<class_name>

The name of the class

=cut

$sk_session->set_var('class_name', $$classs{$class}{displayname});

$sk_session->print_page("$this_file.tt", $this_file);


=back
