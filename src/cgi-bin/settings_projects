#! /usr/bin/perl

=head1 NAME

settings_projects - produces page for settings_projects

=head1 SYNOPSIS

 https://server/schulkonsole/settings_projects

=head1 DESCRIPTION

C<settings> produces the page of settings for projects.
The HTML template is settings_projects.tt.

=head2 Template variables

Additionally to the variables of Schulkonsole::Session C<settings>
provides the following variables:

=over

=cut

use strict;
use utf8;
use lib '/usr/share/schulkonsole';
use Schulkonsole::DB;
use Schulkonsole::Files;
use Schulkonsole::Radius;
use Schulkonsole::Session;
use Schulkonsole::Sophomorix;


my $this_file = 'settings_projects';


my $sk_session = new Schulkonsole::Session($this_file);
if (not $sk_session->get_password()) {
	my $q = new CGI;
	my $url = $q->url( -full => 1 );

	# we send cookies over secure connections only
	if ($url =~ s/^http:/https:/g) {
		$sk_session->redirect($url);
	} else {
		$sk_session->exit_with_login_page($this_file);
	}
}

my $q = $sk_session->query();


my $id = $sk_session->userdata('id');
my $password = $sk_session->get_password();



my $projects;
my $wlanprojects;
COMMANDS: { eval {

$projects = Schulkonsole::DB::projects();
$wlanprojects = Schulkonsole::Radius::group_defaults();

if ($q->param('accept')) {
	my @create_maillist = ();
	my @remove_maillist = ();
	my @create_mailalias = ();
	my @remove_mailalias = ();
	my @enable_wlan = ();
	my @disable_wlan = ();
	my $changes = 0;
	foreach my $project (keys %$projects) {
		if ($q->param("${project}_maillist")) {
			push @create_maillist, $project unless $$projects{$project}{maillist};
		} else {
			push @remove_maillist, $project if $$projects{$project}{maillist};
		}
		if ($q->param("${project}_mailalias")) {
			push @create_mailalias, $project unless $$projects{$project}{mailalias};
		} else {
			push @remove_mailalias, $project if $$projects{$project}{mailalias};
		}
		if ($q->param("${project}_wlan")) {
			push @enable_wlan, $project unless $$wlanprojects{$project};
		} else {
			push @disable_wlan, $project if $$wlanprojects{$project};
		}
		
	}

	if (@create_maillist
	    or @remove_maillist) {
		Schulkonsole::Sophomorix::change_maillist_projects(
			$id, $password,
			\@create_maillist, \@remove_maillist);
		$changes = 1;
	}
	
	if (@create_mailalias
	    or @remove_mailalias) {
		Schulkonsole::Sophomorix::change_mailalias_projects(
			$id, $password,
			\@create_mailalias, \@remove_mailalias);
		$changes = 1;
	}

	if (@enable_wlan or @disable_wlan) {
                Schulkonsole::Radius::wlan_on(
                        $id, $password, @enable_wlan) if @enable_wlan;
                Schulkonsole::Radius::wlan_off(
                        $id, $password, @disable_wlan) if @disable_wlan;
                        my $lines = new_group_default_lines(
                        \%$wlanprojects, \@enable_wlan, \@disable_wlan);
		Schulkonsole::Files::write_group_defaults_file(
                        $id, $password, $lines);
                $changes = 1;
	}

	if ($changes) {
		$projects = Schulkonsole::DB::projects();
		$wlanprojects = Schulkonsole::Radius::group_defaults();

		$sk_session->set_status($sk_session->d()->get(
			'&Auml;nderungen &uuml;bernommen.'), 0);
	} else {
		$sk_session->set_status($sk_session->d()->get(
			'Keine &Auml;nderungen.'), 0);
	}
}
};
} # COMMANDS
if ($@) {
	$sk_session->standard_error_handling($this_file, $@);
}




my %on_off = (
        on => 1,
        off => 0,
        '-' => -1,
);

my @projects;
foreach my $project (sort {
	my ($A) = $$projects{$a}{displayname} =~ /^(\d+)/;
	my ($B) = $$projects{$b}{displayname} =~ /^(\d+)/;
	   $A <=> $B
	or $$projects{$a}{displayname} cmp $$projects{$b}{displayname} }
                   keys %$projects) {
        my $wlan;
        if ($$wlanprojects{$project}) {
                        $wlan = $on_off{$$wlanprojects{$project}};
        } else {
                        $wlan = $on_off{$$wlanprojects{default}};
        }
	push @projects, { gid => $project,
	                name => $$projects{$project}{displayname},
	                maillist => $$projects{$project}{maillist},
	                mailalias => $$projects{$project}{mailalias},
	                wlan => $wlan,
	              };
        if (not defined($q->param("${project}_wlan"))) {
                        $q->param("${project}_wlan",$wlan);
        }
}

=item C<projects>

An array of hashes of the projects of which the current user is a member
with the keys

=over

=item C<gid>

The GID of the project

=item C<name>

The name of the project

=item C<maillist>

The project has a maillist

=item C<mailalias>

The project students have a mailalias

=item C<wlan>

The default state of wlan access 0: off, 1: on

=back

=cut

$sk_session->set_var('projects', \@projects);




$sk_session->print_page("$this_file.tt", $this_file);




=back

=head2 Form fields

=over

=item C<accept>

Write the changes

=cut

sub new_group_default_lines {
    my $defaults = shift;
    my $enable = shift;
    my $disable = shift;
    my $wlan_default = $$defaults{default};
    my @re;


    my %on_off = (
            1 => 'on',
            0 => 'off',
            undef => 'off',
            -1 => '-',
    );

    foreach my $group (@$enable) {
	$$defaults{$group} = 'on';
    }
    foreach my $group (@$disable) {
	$$defaults{$group} = 'off';
    }

    if (open GROUPFILE, "<$Schulkonsole::Config::_group_defaults_file") {
            flock GROUPFILE, 1;
    
        while (my $line = <GROUPFILE>) {
	    my ($spaces_0, $group, $spaces_1, $wlan, $remainder)
	    = $line =~ /^(\s*)([A-z\d\.\-]+)(\s+)(on|off|-)(.*)/;
	    if ($group) {
		if ($group eq 'default') {
		    $line = 'default'
			    . "$spaces_1$wlan_default"
			    . "$remainder\n";
		    push @re, $line;
		    delete $$defaults{default};
		} else {
		    if ($$defaults{$group} ne $wlan_default) { 
			$line = "$group"
			    . "$spaces_1$$defaults{$group}"
			    . "$remainder\n";
			push @re, $line;
		    }
		    delete $$defaults{$group};
		}
	    } else {
		push @re, $line;
	    }
        }

        close GROUPFILE;
    }


    if ($$defaults{default}) {
            push @re,
                    sprintf("%-20s%s\n",'default', $$defaults{default});

            delete $$defaults{default};
    }

    foreach my $group (sort keys %$defaults) {
	    if ($$defaults{$group} ne $wlan_default) {
		push @re,
			sprintf("%-20s%s\n",$group, $$defaults{$group});
	    }
    }
    
    return \@re;
}



=back
