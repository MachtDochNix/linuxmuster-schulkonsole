#! /usr/bin/perl

=head1 NAME

start - startpage of schulkonsole

=head1 SYNOPSIS

 https://server/schulkonsole/start

=head1 DESCRIPTION

C<start> produces the startpage of schulkonsole. The HTML template
is start.shtml.
Functionality of the startpage includes password change and deletion
of printjobs.

=head2 Template variables

Additionally to the variables of Schulkonsole::Session C<start> provides
the following variables:

=over

=item C<printjobs>

A reference to an array of hashes representing the user's printjobs.
The values of the hashes are:

=over

=item C<id>

the id of the printjob

=item C<title>

the title of the printed document

=back

=item C<diskquotas>

A reference to an array of hashes representing the user's diskquotas.
The values of the hashes are:

=over

=item C<path>

The path on the filesystem to which the quota is applied

=item C<blocks_usage>

The number of used blocks

=item C<blocks_soft>

The soft limit for blocks

=item C<blocks_hard>

The hard limit for blocks

=item C<blocks_percent>

Usage in percent from soft limit for blocks

=item C<blocks_grace>

A string with the remaining time until which the blocks usage must be back
under soft limit.

=item C<files_usage>

The number of used files

=item C<files_soft>

The soft limit for files

=item C<files_hard>

The hard limit for files

=item C<files_percent>

Usage in percent from soft limit for files

=item C<files_grace>

A string with the remaining time until which the files usage must be back
under soft limit.

=item C<warn>

True if the user is over quota

=back

=item C<mailquotas>

A reference to an array of hashes representing the user's diskquotas.
The values of the hashes are:

=over

=item C<mbox>

The names of the Mailfolders to which the quota is applied

=item C<type>

The type of the quota

=item C<usage>

Usage of the mailbox - meaning depends on quota type

=item C<limit>

The quota limit

=item C<usage_percent>

Usage in percent from limit

=item C<warn>

True if the user is over quota

=back

=item C<projects>

A comma seperated list of the user's projects

=item C<classes_str>

A comma seperated list of the user's classes

=item C<mailaliases>

A comma seperated list of the user's mailaliases

=back


=head2 Form fields

=head3 Password change

The following form fields are used to change a user's password:

=over

=item oldpassword

The current password

=item newpassword

The new password

=item newpasswordagain

Used to rule typos out

=back

=head3 Deleting print jobs

The following form fields are used to delete print jobs:

=over

=item printjobs

The id of a user's print job to delete. May be used more than once, i.e.Z<>
you can use C<< <select name="printjobs" multiple> >>.

=back

=cut

use strict;
use lib '@datadir@/@PACKAGE@';
use Net::CUPS;
use Schulkonsole::Session;
use Schulkonsole::Config;
use Schulkonsole::Info;

my $this_file = 'start';


my $sk_session = new Schulkonsole::Session($this_file);
my $q = $sk_session->query();


sub password_cb {
	return $sk_session->get_password();
}


Net::CUPS::Printer::cupsSetUser($sk_session->userdata('uid'));
Net::CUPS::Printer::cupsSetPasswordCB(\&password_cb);



# password change
if (   defined $q->param('oldpassword')
    or defined $q->param('newpassword')
    or defined $q->param('newpasswordagain')) {

	my $oldpassword = $q->param('oldpassword');
	my $newpassword = $q->param('newpassword');
	my $newpasswordagain = $q->param('newpasswordagain');

	my $error_cnt = 0;
	if (not $oldpassword) {
		$error_cnt++;
		$sk_session->mark_input_error('oldpassword');
		$sk_session->set_status(
			$sk_session->d()->get('Altes Passwort eingeben'), 1);
	}

	if (not $newpassword) {
		$error_cnt++;
		$sk_session->mark_input_error('newpassword');
		$sk_session->set_status(
			$sk_session->d()->get('Neues Passwort eingeben'), 1);
	}

	if (not $newpasswordagain) {
		$error_cnt++;
		$sk_session->mark_input_error('newpasswordagain');
		$sk_session->set_status($sk_session->d()->get(
			'Neues Passwort zur Kontrolle zweimal eingeben'), 1);
	}

	if ($error_cnt) {
		if ($error_cnt > 1) {
			$sk_session->set_status($sk_session->{d}->get(
				'Daten zur Passwort&auml;nderung unvollst&auml;ndig'), 1);
		}
	} elsif ($newpassword ne $newpasswordagain) {
		$sk_session->mark_input_error('newpassword');
		$sk_session->mark_input_error('newpasswordagain');
		$sk_session->set_status($sk_session->{d}->get(
			'Neues Passwort nicht richtig wiederholt'), 1);
	} else {
		eval {
			Schulkonsole::DB::change_password($sk_session->userdata('uid'),
				$oldpassword,
				$q->param('newpassword'), $newpasswordagain);

			$sk_session->save_password($newpasswordagain);
			if (my $hash_mailquotas
			    	= $sk_session->temp_param('hash_mailquotas')) {
				$sk_session->temp_param('hash_mailquotas', $hash_mailquotas);
			}

			$sk_session->set_status(
				$sk_session->{d}->get('Passwort&auml;nderung erfolgreich'), 0);
		};
		if ($@) {
			$sk_session->standard_error_handling($this_file, $@);
		}
	}

# cancel print jobs
} elsif (defined $q->param('printjobs')) {
	my $status;
	my $is_error = 0;

	if (not $sk_session->get_password()) {
		$sk_session->exit_with_login_page($this_file);
	}

	foreach my $job ($q->param('printjobs')) {
		my ($job_dest, $job_id) = $job =~ /^(.+)-(\d+)$/;

		if ($status) {
			$status .= ', ';
		}
		$status .= "$job: ";
		if (not Net::CUPS::Printer::cupsCancelJob($job_dest, $job_id)) {
			my $error = Net::CUPS::Printer::cupsLastError();
			SWITCH: {
			$error == Net::CUPS::Protocol::IPP_NOT_POSSIBLE and do {
				$status .= $sk_session->d()->get('nicht m&ouml;glich');
				last SWITCH;
			};
			$status .= Net::CUPS::Printer::cupsErrorString($error);
			}
			$is_error = 1;
		} else {
			$status .= $sk_session->d()->get('abgebrochen');
		}
	}

	$sk_session->set_status($status, $is_error);
}



my @jobs = Net::CUPS::Printer::cupsGetJobs(undef, 1, 0);
my @array_printjobs;
foreach my $job (@jobs) {
	next unless $job;

	my $printjob = {
		id => "$$job{dest}-$$job{id}",
		title => $$job{title},
	};
	push @array_printjobs, $printjob;
}
$sk_session->set_var('printjobs', \@array_printjobs) if @array_printjobs;




my $disk_quotas =
	Schulkonsole::Info::disk_quotas($sk_session->userdata('uidnumber'));

my @array_diskquotas;
foreach my $disk_quota (@$disk_quotas) {
	my ($filesystem, $path,
	    $blocks_usage, $blocks_soft, $blocks_hard,
	    $blocks_grace,
	    $files_usage, $files_soft, $files_hard,
	    $files_grace) = @$disk_quota;
	next unless defined $files_hard;

	my $blocks_percent = $blocks_soft ?
		  sprintf('%.1f', 100 * $blocks_usage / $blocks_soft)
		: 0;
	my $files_percent = $files_soft ?
		  sprintf('%.1f', 100 * $files_usage / $files_soft)
		: 0;

	my $blocks_grace_str;
	if ($blocks_grace) {
		$blocks_grace -= $^T;
		if ($blocks_grace > 86400) {
			$blocks_grace_str = sprintf($sk_session->d()->get('%d Tage'),
				$blocks_grace / 86400 + 0.5);
		} elsif ($blocks_grace > 7200) {
			$blocks_grace_str = sprintf($sk_session->d()->get('%d Stunden'),
				$blocks_grace / 3600 + 0.5);
		} elsif ($blocks_grace > 0) {
			$blocks_grace_str = sprintf($sk_session->d()->get('%d Minuten'),
				$blocks_grace / 60 + 0.5);
		} else {
			$blocks_grace_str = $sk_session->d()->get('abgelaufen');
		}
	} else {
		$blocks_grace_str = '-';
	}

	my $files_grace_str;
	if ($files_grace) {
		$files_grace -= $^T;
		if ($files_grace > 86400) {
			$files_grace_str = sprintf($sk_session->d()->get('%d Tage'),
				$files_grace / 86400 + 0.5);
		} elsif ($files_grace > 7200) {
			$files_grace_str = sprintf($sk_session->d()->get('%d Stunden'),
				$files_grace / 3600 + 0.5);
		} elsif ($files_grace > 0) {
			$files_grace_str = sprintf($sk_session->d()->get('%d Minuten'),
				$files_grace / 60 + 0.5);
		} else {
			$files_grace_str = $sk_session->d()->get('abgelaufen');
		}
	} else {
		$files_grace_str = '-';
	}

	my $diskquota = {
		'warn' => $blocks_grace || $files_grace,
		path => $path,
		blocks_usage => $blocks_usage,
		blocks_soft => $blocks_soft,
		blocks_hard => $blocks_hard,
		blocks_percent => $blocks_percent,
		blocks_grace => $blocks_grace_str,
		files_usage => $files_usage,
		files_soft => $files_soft,
		files_hard => $files_hard,
		files_percent => $files_percent,
		files_grace => $files_grace_str,
	};

	push @array_diskquotas, $diskquota;
}

$sk_session->set_var('diskquotas', \@array_diskquotas);


if (my $var_mailquotas = $sk_session->temp_param('var_mailquotas')) {
	$sk_session->set_var('mailquotas', $var_mailquotas);
} elsif (not $sk_session->param('nomailquota')) {
	eval {
	my $quotaroots = Schulkonsole::Info::mail_quotas(
		$sk_session->userdata('uid'), $sk_session->get_password());

	my @array_mailquotas;
	foreach my $quotaroot (sort keys %{ $quotaroots }) {
		foreach my $type (keys %{ $$quotaroots{$quotaroot}{quota} }) {
			my $type_str;
			SWITCH: {
			$type eq 'STORAGE' and do {
				$type_str = $sk_session->d()->get('Speicherplatz');
				last SWITCH;
			};
			$type_str = $type;
			}

			my $usage = $$quotaroots{$quotaroot}{quota}{$type}{usage};
			my $limit = $$quotaroots{$quotaroot}{quota}{$type}{limit};
			my $usage_percent = $usage ?
				  sprintf('%.1f', 100 * $usage / $limit)
				: 0;
			my $mboxs;
			foreach my $mbox (@{ $$quotaroots{$quotaroot}{mbox} }) {
				$mboxs .= "$mbox<br>";
			}

			my $mailquota = {
				'warn' => $usage > $limit,
				mbox => $mboxs,
				type => $type_str,
				usage => $usage,
				limit => $limit,
				usage_percent => $usage_percent,
			};

			push @array_mailquotas, $mailquota;
		}
	}

	$sk_session->temp_param('var_mailquotas', \@array_mailquotas);
	$sk_session->set_var('mailquotas', \@array_mailquotas);
	};
	if ($@) {
		$sk_session->param('nomailquota', $@);
	}
}



my @projects;
my $projects = Schulkonsole::Info::groups_projects($sk_session->groups());
foreach my $project (values %$projects) {
	push @projects, $$project{longname};
}

my $var_projects = join ', ', @projects;
$sk_session->set_var('projects', $var_projects);

my @classs;
my $classs = Schulkonsole::Info::groups_classes($sk_session->groups());
foreach my $class (values %$classs) {
	push @classs, $$class{displayname};
}

my $var_classes_str = join ', ', @classs;
$sk_session->set_var('classes_str', $var_classes_str);



my $var_mailaliases =
	join ', ', Schulkonsole::Info::mailaliases($sk_session->userdata('uid'));
$sk_session->set_var('mailaliases', $var_mailaliases);





$sk_session->print_page("$this_file.shtml", $this_file);
