#! /usr/bin/perl

=head1 NAME

wrapper-collab.pl - wrapper for configuration of databases and version control
system

=head1 SYNOPSIS

 my $id = $userdata{id};
 my $password = 'secret';
 my $app_id = Schulkonsole::Config::CREATEDROPDBAPP;

 open SCRIPT, "| $Schulkonsole::Config::_wrapper_collab";
 print SCRIPT <<INPUT;
 $id
 $password
 $app_id
 1

 INPUT

=head1 DESCRIPTION

=cut

use strict;
use lib '@datadir@/@PACKAGE@';
use Sophomorix::SophomorixAPI;
use Sophomorix::SophomorixConfig;
use Schulkonsole::Config;
use Schulkonsole::DB;
use Schulkonsole::RoomSession;
use Schulkonsole::Firewall;



my $id = <>;
$id = int($id);
my $password = <>;
chomp $password;

my $userdata = Schulkonsole::DB::verify_password_by_id($id, $password);
exit -32 unless $userdata;

my $app_id = <>;
($app_id) = $app_id =~ /^(\d+)$/;
exit -33
	unless defined $app_id && $Schulkonsole::Config::_root_apps[$app_id];



my $permissions = Schulkonsole::Config::permissions_apps();
my $groups = Schulkonsole::DB::user_groups(
	$$userdata{uidnumber}, $$userdata{gidnumber}, $$userdata{gid});

my $app;
foreach my $group (('ALL', keys %$groups)) {
	foreach my $name (keys %{ $$permissions{$group} }) {
		if ($Schulkonsole::Config::_root_app_name_ids{$name} == $app_id) {
			$app = $Schulkonsole::Config::_root_apps[$app_id];
			last;
		}
	}
}
exit -34 unless $app;


my $opts;
SWITCH: {

=head3 create_drop_db

numeric constant: C<Schulkonsole::Config::CREATEDROPDBAPP>

=head4 Description

invokes

=over

=item

C<< linuxmuster-mysql --create --group=<gid> --teacher=<uid> >>

=item

C<< linuxmuster-mysql --drop --group=<gid> --teacher=<uid> >>

=back

=head4 Parameters from standard input

=over

=item is_create

C<0> drop database,
C<1> create database

=item gid

GID to which the database belongs

=back


=head3 create_repository

numeric constant: C<Schulkonsole::Config::CREATEDROPREPOSITORYAPP>

=head4 Description

invokes

=over

=item

C<< linuxmuster-svn --create --group=<gid> --teacher=<uid> >>

=item

C<< linuxmuster-svn --drop --group=<gid> --teacher=<uid> >>

=back

=head4 Parameters from standard input

=over

=item is_create

C<0> drop repository,
C<1> create repository

=item gid

GID to which the repository belongs

=back

=cut

(   $app_id == Schulkonsole::Config::CREATEDROPDBAPP
 or $app_id == Schulkonsole::Config::CREATEDROPREPOSITORYAPP) and do {
	my $is_create = <>;
	($is_create) = $is_create =~ /^(\d+)$/;
	exit -48 unless defined $is_create;

	my $opts;
	my $gid = <>;
	($gid) = $gid =~ /^(.+)$/;

	$opts = ($is_create ? '--create' : '--drop')
		. " --group=\Q$gid\E --teacher=\Q$$userdata{uid}";


	# linuxmuster-... cannot be invoked with taint checks enabled
	local $< = $>;
	if ($app_id == Schulkonsole::Config::CREATEDROPDBAPP) {
		# MySQL searches for .my.cnf in $HOME
		$ENV{HOME} = (getpwuid($>))[7];
	}
	exec "$app $opts" or last SWITCH;
};

=head3 drop_db_user

numeric constant: C<Schulkonsole::Config::DROPDBUSERAPP>

=head4 Description

invokes

C<< linuxmuster-mysql --drop --dbname=<db> >> for each database

=head4 Parameters from standard input

=over

=item C<db1>, C<db2>, ...

A list of names of databases, one per line terminated with empty line

=back

=cut

$app_id == Schulkonsole::Config::DROPDBUSERAPP and do {
	my %dbs;
	while (<>) {
		my ($db) = /^(.+)$/;
		last unless $db;

		$dbs{$db} = 1;

	}
	exit -50 unless %dbs;

	my @dbs;

	## linuxmuster-mysql cannot be invoked with taint checks enabled
	local $< = $>;
	# MySQL searches for .my.cnf in $HOME
	$ENV{HOME} = (getpwuid($>))[7];

	open LIST, $Schulkonsole::Config::_root_apps[Schulkonsole::Config::LISTDBUSERAPP] . " --list --user=\Q$$userdata{uid}\E |" or exit -51;
	while (<LIST>) {
		my ($db) = /^(.+)$/;
		push @dbs, $db if $dbs{$db};
	}
	exit -50 unless @dbs;



	foreach my $db (@dbs) {
		my $opts = "--drop --dbname=\Q$db";
		system "$app $opts";
		exit ($? >> 8) if $?;
	}

	exit 0;
};

=head3 list_db_user

numeric constant: C<Schulkonsole::Config::LISTDBUSERAPP>

=head4 Description

invokes

=over

=item

C<< linuxmuster-mysql --list --user=<uid> >>

=back

=head4 Parameters from standard input

none

=cut

$app_id == Schulkonsole::Config::LISTDBUSERAPP and do {
	my $opts = "--list --user=\Q$$userdata{uid}";

	# linuxmuster-svn cannot be invoked with taint checks enabled
	local $< = $>;
	# MySQL searches for .my.cnf in $HOME
	$ENV{HOME} = (getpwuid($>))[7];

	exec "$app $opts" or last SWITCH;
};



=head3 list_db

numeric constant: C<Schulkonsole::Config::LISTDBAPP>

=head4 Description

invokes

=over

=item

C<< linuxmuster-mysql --list --group=<gid> >>

=item

C<< linuxmuster-mysql --list --teacher=<uid> >>

=back

=head4 Parameters from standard input

=over

=item is_gid

C<0> uses the teacher's UID,
C<1> awaits the parameter gid

=item gid

GID to which the database belongs

=back


=head3 list_repository

numeric constant: C<Schulkonsole::Config::LISTREPOSITORYAPP>

=head4 Description

invokes

=over

=item

C<< linuxmuster-svn --list --group=<gid> >>

=item

C<< linuxmuster-svn --list --teacher=<uid> >>

=back

=head4 Parameters from standard input

=over

=item is_gid

C<0> uses the teacher's UID,
C<1> awaits the parameter gid

=item gid

GID to which the repository belongs

=back

=cut

(   $app_id == Schulkonsole::Config::LISTDBAPP
 or $app_id == Schulkonsole::Config::LISTREPOSITORYAPP) and do {
	my $is_gid = <>;
	($is_gid) = $is_gid =~ /^(\d+)$/;
	exit -49 unless defined $is_gid;

	my $opts = '--list ';

	if ($is_gid) {
		my $gid = <>;
		($gid) = $gid =~ /^(.+)$/;

		$opts .= "--group=\Q$gid" if $gid;
	} else {
		$opts .= "--teacher=\Q$$userdata{uid}";
	}


	# linuxmuster-... cannot be invoked with taint checks enabled
	local $< = $>;
	if ($app_id == Schulkonsole::Config::LISTDBAPP) {
		# MySQL searches for .my.cnf in $HOME
		$ENV{HOME} = (getpwuid($>))[7];
	}
	exec "$app $opts" or last SWITCH;
};

}



exit -2;	# program error

